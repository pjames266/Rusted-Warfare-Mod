
[core]
name: nukeEffectManager
copyFrom: ROOT:/myAssets/dummyUnit.ini, nukeCommon.ini

@global nukeFireBallTimeBase: 40
@global nukeMainCloudTimeBase: 160
@global nukeFadeOutTimeBase: 75
@global nukeSizeBase: 1.6
@global mainImageOffset: -65

radius:30
#autoTriggerCheckRate:every4Frames
#autoTriggerCooldownTime: 30

@memory etm: float
@memory etmSinceStage2: float
@memory etmSinceStage3: float
updateUnitMemory: etm=memory.etm + 1/(self.resource.nukeTimeScale), etmSinceStage2=memory.etm-${nukeFireBallTimeBase}, etmSinceStage3=memory.etmSinceStage2-${nukeMainCloudTimeBase}
updateUnitMemoryRate: 0.015s

[hiddenAction_dieOnMaxLife]
autoTrigger: if memory.etm > ${nukeFireBallTimeBase+nukeMainCloudTimeBase+nukeFadeOutTimeBase}
setResourcesWithLogic: hp = -100000
[hiddenAction_setStartingTime1]
autoTriggerOnEvent: created
setUnitMemory: etm = 0, etmSinceStage2 = -500, etmSinceStage3 = -500
alsoTriggerAction:setStartingTime2
[hiddenAction_setStartingTime2]
requireConditional:if self.resource.nukeIsInstant > 0.5
setUnitMemory: etm = ${nukeFireBallTimeBase}
[hiddenAction_useDefaultParameters]
autoTriggerOnEvent: created
requireConditional:if self.resource.nukeTimeScale <= 0 or self.resource.nukeSizeScale <= 0
setResourcesWithLogic: nukeTimeScale = 1, nukeSizeScale = 1

[comment_hiddenAction_showMessageAboutParameters]
autoTrigger: if memory.etm > 10 and not self.tags(includes='parameterReported')
showMessageToAllPlayers: ${core.name} size and time scale: %{self.resource.nukeSizeScale}, %{self.resource.nukeTimeScale}.
temporarilyAddTags: parameterReported
[comment_hiddenAction_showMessageAllTheTime]
autoTrigger: true
showMessageToAllPlayers: ${core.name} is alive, memory.etm: %{memory.etm}.
[comment_hiddenAction_showMessageOnDeath]
autoTriggerOnEvent: destroyed
showMessageToAllPlayers: ${core.name} is dead.


[graphics]
drawLayer:air
#imageScale does not affect decals....
#imageScale:${nukeSizeBase}
isVisible: true
showTransportBar: false
#image: ROOT:/myAssets/displacement_vortex.png


[template_nukeEffectDecalBase]
@copyFromSection: template_anyBodyComponentDecal
@define baseAlpha: 0.95
layer: beforeUI
teamColors: false
#The first frame might be broken, because parameters are not properly set yet
isVisible: if memory.etm > 0
imageScale: self.resource.nukeSizeScale * ${nukeSizeBase}
onlyWithZoomLevelOrMore: 0
[template_nukeEffectMainComponentDecalBase]
@copyFromSection: template_nukeEffectDecalBase
order: 10
total_frames:40
image: nuke.png
yOffsetAbsolute:${mainImageOffset} * self.resource.nukeSizeScale * ${nukeSizeBase}



#Body
[decal_startingFireBall]
@copyFromSection: template_nukeEffectMainComponentDecalBase
frame:0
imageScale: self.resource.nukeSizeScale * ${nukeSizeBase} * (0.4 + 0.6 * memory.etm/${nukeFireBallTimeBase})
yOffsetAbsolute:${mainImageOffset} * self.resource.nukeSizeScale * ${nukeSizeBase} * (0.4 + 0.6 * memory.etm/${nukeFireBallTimeBase})
alpha: select(memory.etm <= ${nukeFireBallTimeBase}, ${baseAlpha}, 0)
[decal_nukeMainCloudLand]
@copyFromSection: template_nukeEffectMainComponentDecalBase
@define showCondition: not self.isOverWater
frame:min(39, int((memory.etmSinceStage2)/${nukeMainCloudTimeBase/section.total_frames}))
image: nuke.png
alpha: select(${showCondition} and memory.etmSinceStage2 >= 0 and memory.etmSinceStage3 <= 0, ${baseAlpha}, 0)
[decal_nukeMainCloudWater]
@copyFromSection: decal_nukeMainCloudLand
@define showCondition: self.isOverWater
image: nuke2.png
[decal_nukeFadeOut]
@copyFromSection: template_nukeEffectMainComponentDecalBase
frame:39
alpha: select(memory.etmSinceStage3 >= 0, ${baseAlpha} * (1-(memory.etmSinceStage3)/${nukeFadeOutTimeBase}), 0)


#Lights
[decal_nukeStartingLight]
@copyFromSection: template_nukeEffectDecalBase
image: light_yellow.png
order: 7
isVisible: if self.resource.nukeIsInstant < 0.5
imageScale: self.resource.nukeSizeScale * ${nukeSizeBase*6.8}
alpha: 0.3*select(memory.etmSinceStage2 < 0, min(1, memory.etm / ${nukeFireBallTimeBase}*2), 1-memory.etmSinceStage2/${nukeFireBallTimeBase} )
[decal_nukePersistentLight]
@copyFromSection: template_nukeEffectDecalBase
image: light_yellow.png
order: 15
imageScale: self.resource.nukeSizeScale * ${nukeSizeBase*2.4}
alpha: 0.36*min(1, 2*select(memory.etmSinceStage2 <= ${nukeMainCloudTimeBase/2}, memory.etmSinceStage2 / ${nukeMainCloudTimeBase/2}, (${nukeMainCloudTimeBase}-memory.etmSinceStage2) / ${nukeMainCloudTimeBase/2}  ))
yOffsetAbsolute:self.resource.nukeSizeScale * ${nukeSizeBase} * -90 * min(memory.etmSinceStage2 / ${nukeMainCloudTimeBase/2.5}, 1)
[decal_nukeDustLand]
@copyFromSection: template_nukeEffectDecalBase
@define startEtm: 40
@define endEtm: 270
image: light_dust.png
isVisible: if not self.isOverWater
order: 14
imageScale: self.resource.nukeSizeScale * ${nukeSizeBase*2}
alpha: 0.3 * min(1, 2*select((memory.etm-${startEtm})<${(endEtm-startEtm)/2}, (memory.etm-${startEtm})/${(endEtm-startEtm)/2}, (${endEtm}-memory.etm)/${(endEtm-startEtm)/2}))
yOffsetAbsolute:self.resource.nukeSizeScale * ${nukeSizeBase} * (-60 - 40 * min(1, 1.5*select((memory.etm-${startEtm})<${(endEtm-startEtm)/2}, (memory.etm-${startEtm})/${(endEtm-startEtm)/2}, (${endEtm}-memory.etm)/${(endEtm-startEtm)/2})))
[decal_nukeDustWater]
@copyFromSection: decal_nukeDustLand
isVisible: if self.isOverWater
image: light_dust_water.png

#Shockwave
[decal_nukeBottomWave]
@copyFromSection: template_nukeEffectDecalBase
image: ROOT:/myAssets/waveSpicky5.png
order: 0
alpha: ${baseAlpha*0.85} * select(memory.etmSinceStage2>0, min(1, 1.5*(${nukeMainCloudTimeBase/2.5}-memory.etmSinceStage2)/${nukeMainCloudTimeBase/2.5}), 0) 
imageScale: self.resource.nukeSizeScale * ${nukeSizeBase} * (1.6*memory.etmSinceStage2/${nukeMainCloudTimeBase/2.5})



#Rings
[decal_nukeUpperCloud1Front]
@copyFromSection: template_nukeEffectDecalBase
@define startEtm: 80
@define endEtm: 215
@define sizeFactor: 1
@define alphaFactor: 0.7
@define yOffset: 130
@define minimumScaleToShow: 0
image: wave_cloud1.png
order: 16
isVisible: if self.resource.nukeSizeScale > ${minimumScaleToShow}
alpha: ${baseAlpha*alphaFactor} * select((memory.etm-${startEtm})<${(endEtm-startEtm)/4}, (memory.etm-${startEtm})/${(endEtm-startEtm)/4}, (${endEtm}-memory.etm)/${(endEtm-startEtm)*3/4})
imageScale: self.resource.nukeSizeScale * ${nukeSizeBase*sizeFactor} * (0.9+1.1*((memory.etm-${startEtm})/${endEtm-startEtm}))
yOffsetAbsolute:self.resource.nukeSizeScale * ${nukeSizeBase * yOffset * -1}
[comment_decal_nukeUpperCloud1Back]
#Don't work: the two parts get seperated when zoomed out...
@copyFromSection: decal_nukeUpperCloud1Front
image: wave_cloud1_back.png
order: 6
[decal_nukeUpperCloud2Front]
@copyFromSection: decal_nukeUpperCloud1Front
@define startEtm: 90
@define sizeFactor: 0.85
@define yOffset: 160
@define minimumScaleToShow: 0.8
order: 17
[decal_nukeUpperCloud3Front]
@copyFromSection: decal_nukeUpperCloud1Front
@define startEtm: 100
@define sizeFactor: 0.7
@define yOffset: 185
@define minimumScaleToShow: 1.3
order: 18
[decal_nukeUpperCloud4Front]
@copyFromSection: decal_nukeUpperCloud1Front
@define startEtm: 110
@define sizeFactor: 0.55
@define yOffset: 205
@define minimumScaleToShow: 2
order: 19
[decal_nukeBottomCloudLand]
@copyFromSection: decal_nukeUpperCloud1Front
@define startEtm: 70
@define endEtm: 270
@define yOffset: 0
@define sizeFactor: 1.1
@define alphaFactor: 0.9
image: wave_cloud3.png
order: 1
isVisible: if not self.isOverWater
[decal_nukeBottomCloudWater]
@copyFromSection: decal_nukeBottomCloudLand
isVisible: if self.isOverWater
image: wave_cloud4.png






